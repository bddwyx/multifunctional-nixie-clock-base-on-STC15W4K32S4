C51 COMPILER V9.54   UART_TRANSLATE                                                        01/27/2020 20:54:05 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART_TRANSLATE
OBJECT MODULE PLACED IN ..\object\uart_translate.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\user\src\uart_translate.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\us
                    -er\inc;..\drivers\inc;..\main) DEBUG OBJECTEXTEND PRINT(..\listing\uart_translate.lst) TABS(2) OBJECT(..\object\uart_tra
                    -nslate.obj)

line level    source

   1          #ifndef _UART_TRANSLATE_C
   2          #define _UART_TRANSLATE_C
   3          
   4          #include "config.h"
   5          #include "uart_translate.h"
   6          #include "UART.h"
   7          #include "alarm_set.h"
   8          #include "DS1302.h"
   9          #include "74hc595.h"
  10          #include "5050rgb.h"
  11          #include "pwm.h"
  12          
  13          #endif
  14          
  15          unsigned char str[RXD_MAX];
  16          
  17          unsigned char code str0[]="return";
  18          unsigned char code str1[]="set alarm";
  19          unsigned char code str2[]="set time";
  20          unsigned char code str3[]="date";
  21          unsigned char code str4[]="on";
  22          unsigned char code str5[]="off"; 
  23          unsigned char code str6[]="random";
  24          unsigned char code str7[]="led";
  25          unsigned char code str8[]="pwm";  
  26          unsigned char code *ptr[]={str0,str1,str2,str3,str4,str5,str6,str7,str8};
  27          unsigned char code len[]={sizeof(str0)-1,sizeof(str1)-1,sizeof(str2)-1,sizeof(str3)-1,sizeof(str4)-1,
  28                                    sizeof(str5)-1,sizeof(str6)-1,sizeof(str7)-1,sizeof(str8)-1};
  29          
  30          unsigned char cmp_memory(unsigned char *str0,unsigned char *new,unsigned char len)
  31          {
  32   1          unsigned char i;
  33   1      
  34   1        for(i=0;i<len;i++)
  35   1        {
  36   2            if(str0[i]!=new[i]) break;
  37   2        }
  38   1      
  39   1        if(len==i) return 1;
  40   1        else return 0;
  41   1      }
  42          
  43          void uart_process()
  44          {
  45   1          if((!rxd_flag)&&(rxd_complete)) 
  46   1        {
  47   2            uart_read(str);
  48   2          if(cmp_memory(ptr[0],str,len[0])) uart_write(str);
  49   2          if(cmp_memory(ptr[1],str,len[1]))
  50   2          {
  51   3              alarm_set(str+10,*(str+9)-'0');
  52   3            uart_write("alarm has been set at ");
  53   3            uart_write(str+10);
C51 COMPILER V9.54   UART_TRANSLATE                                                        01/27/2020 20:54:05 PAGE 2   

  54   3            uart_write("\r\n");
  55   3          }
  56   2          if(cmp_memory(ptr[2],str,len[2]))
  57   2          {
  58   3      
  59   3          }
  60   2          if(cmp_memory(ptr[3],str,len[3])) 
  61   2          {
  62   3              date_switch=1;
  63   3            tube_switch=1;
  64   3            random_switch=0;
  65   3          }
  66   2          if(cmp_memory(ptr[4],str,len[4])) 
  67   2          {
  68   3              tube_switch=1;
  69   3          }
  70   2          if(cmp_memory(ptr[5],str,len[5])) 
  71   2          { 
  72   3              tube_shutdown(); 
  73   3          }
  74   2          if(cmp_memory(ptr[6],str,len[6]))
  75   2          {
  76   3              date_switch=0;
  77   3            tube_switch=1;
  78   3            random_switch=1;
  79   3          }   
  80   2          if(cmp_memory(ptr[7],str,len[7]))
  81   2          {
  82   3              configpwm((int)((str[3]-'0')*200+1),(int)((str[4]-'0')*200+1),(int)((str[5]-'0')*200+1));
  83   3            uart_write("yes\r\n");
  84   3          }
  85   2          if(cmp_memory(ptr[8],str,len[8]))
  86   2          {     
  87   3            pwm_state=(str[3]-'0')*10+(str[4]-'0');
  88   3            ini_pwm(pwm_state);
  89   3            uart_write("yes\r\n");                  
  90   3          }
  91   2            
  92   2          rxd_complete=0;
  93   2        }
  94   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    610    ----
   CONSTANT SIZE    =     94    ----
   XDATA SIZE       =     48       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
